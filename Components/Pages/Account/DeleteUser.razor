@page "/Account/Delete"
@using PersonalPlanner.Data
@using PersonalPlanner.Models
@using MongoDB.Driver
@inject MongoDBContext dbContext
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer

<PageTitle>Delete Account</PageTitle>

<h1>Delete Account</h1>

<h3>Are you sure you want to delete this account?</h3>

<div>
    @if (string.IsNullOrEmpty(currentUserName))
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Username:</dt>
            <dd class="col-sm-10">@currentUserName</dd>
            <dt class="col-sm-2">Role:</dt>
            <dd class="col-sm-10">@currentUserRole</dd>
        </dl>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        <div class="row">
            <div class="col-md-4">
                <EditForm Model="user" OnValidSubmit="DeleteAccount">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="password" class="form-label">Password:</label>
                        <InputText id="password" @bind-Value="password" type="password" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-danger">Delete Account</button> |
                    <a href="/Account">Back to Account</a>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private User user = new User();
    private string currentUserName;
    private string currentUserRole;
    private string password;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserName = user.Identity?.Name;
        currentUserRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

        if (string.IsNullOrEmpty(currentUserName))
        {
            navigationManager.NavigateTo("/Login");
            return;
        }
    }

    private async Task DeleteAccount()
    {
        errorMessage = string.Empty;

        var userCollection = dbContext.Users;
        var user = await userCollection.Find(u => u.user_name == currentUserName).FirstOrDefaultAsync();

        if (user == null)
        {
            errorMessage = "User not found.";
            return;
        }

        if (!BCrypt.Net.BCrypt.Verify(password, user.password))
        {
            errorMessage = "Password is incorrect.";
            return;
        }

        // Sign out the user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;

        if (userPrincipal.Identity?.IsAuthenticated ?? false)
        {
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/logout", true);
        }

        // Delete user account
        var filter = Builders<User>.Filter.Eq(u => u.Id, user.Id);
        await userCollection.DeleteOneAsync(filter);

        // Delete related Todos
        var todoFilter = Builders<TodoTask>.Filter.Eq(t => t.user_name, currentUserName);
        await dbContext.Todo.DeleteManyAsync(todoFilter);

        // Delete related Budgets
        var budgetFilter = Builders<Budget>.Filter.Eq(b => b.user_name, currentUserName);
        await dbContext.Budgets.DeleteManyAsync(budgetFilter);

        // Delete related Goals
        var goalFilter = Builders<Goal>.Filter.Eq(g => g.user_name, currentUserName);
        await dbContext.Goal.DeleteManyAsync(goalFilter);

        // Redirect to home page after deletion
        navigationManager.NavigateTo("/");
    }
}
