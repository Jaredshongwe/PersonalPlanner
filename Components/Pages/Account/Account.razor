@page "/Account"
@using PersonalPlanner.Data
@using PersonalPlanner.Models
@using MongoDB.Driver
@inject MongoDBContext dbContext
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer

<PageTitle>Account</PageTitle>

<h1>Account</h1>

<div>
    <h4>Account</h4>
    <hr />
   
    @if (string.IsNullOrEmpty(currentUserName))
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Username:</dt>
            <dd class="col-sm-10">@currentUserName</dd>
            <dt class="col-sm-2">Role:</dt>
            <dd class="col-sm-10">@currentUserRole</dd>
        </dl>
        <div>
            <a href="@($"/Account/Edit")">Change Password</a>  |
            <a href="@($"/")">Back Home</a>   |
            <a href="@($"/Account/Delete")" class="text-danger">Delete Account</a>
        </div>
    }
</div>

@code {
    private string currentUserName;
    private string currentUserRole;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentUserName = user.Identity?.Name;
        currentUserRole = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

        if (string.IsNullOrEmpty(currentUserName))
        {
            navigationManager.NavigateTo("/Login");
            return;
        }
    }
}
