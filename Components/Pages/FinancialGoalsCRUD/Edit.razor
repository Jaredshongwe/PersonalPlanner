@page "/Goals/edit"
@using PersonalPlanner.Data
@using PersonalPlanner.Models.ViewModels
@using PersonalPlanner.Models
@using MongoDB.Driver
@inject MongoDBContext dbContext
@inject NavigationManager navigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Goal</h4>
<hr />
@if (Goal is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@Model" OnValidSubmit="EditGoals" FormName="editForm">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Id" value="@Goal.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Model.Title" class="form-control" placeholder="@Goal.Title" />
                    <ValidationMessage For="() => Model.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="GoalDate" class="form-label">GoalDate:</label>
                    <InputDate id="GoalDate" @bind-Value="Model.GoalDate" class="form-control" placeholder="@Goal.GoalDate" />
                    <ValidationMessage For="() => Model.GoalDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Description" class="form-label">Description:</label>
                    <InputText id="Description" @bind-Value="Model.Description" class="form-control" placeholder="@Goal.Description" />
                    <ValidationMessage For="() => Model.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="Amount" class="form-label">Amount:</label>
                    <InputNumber id="Amount" @bind-Value="Model.Amount" class="form-control" placeholder="@Goal.Amount" />
                    <ValidationMessage For="() => Model.Amount" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/Goals">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    public EditGoalsModels Model { get; set; } = new();
    
    public Goal Goal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("id", out var idValue) && int.TryParse(idValue, out var id))
        {
            var filter = Builders<Goal>.Filter.Eq(t => t.Id, id);
            Goal = await dbContext.Goal.Find(filter).FirstOrDefaultAsync();
            if (Goal == null)
            {
                navigationManager.NavigateTo("notfound");
            }
        }
        else
        {
            navigationManager.NavigateTo("/Goals");
        }
    }
    public async Task EditGoals()
    {
        var title = Model.Title;
        var goalDate = Model.GoalDate;
        var description = Model.Description;
        var amount = Model.Amount;

        // Update the Goal object
            Goal.Title = title;
            Goal.GoalDate = goalDate;
            Goal.Description = description;
            Goal.Amount = amount;

        // Update the TodoTask in the database
        var filter = Builders<Goal>.Filter.Eq(t => t.Id, Goal.Id);
        var update = Builders<Goal>.Update
        .Set("Title" , Goal.Title)
        .Set("GoalDate", Goal.GoalDate)
        .Set("Description", Goal.Description)
        .Set("Amount", Goal.Amount);

        await dbContext.Goal.UpdateOneAsync(filter, update);

        navigationManager.NavigateTo("/Goals", true);
    }
}
