@page "/Goals/delete"
@using PersonalPlanner.Data
@using PersonalPlanner.Models.ViewModels
@using PersonalPlanner.Models
@using MongoDB.Driver
@inject MongoDBContext DB
@inject NavigationManager navigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Goal</h4>
    <hr />
    @if (Goal is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@Goal.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">GoalDate</dt>
            <dd class="col-sm-10">@Goal.GoalDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@Goal.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@Goal.Amount</dd>
        </dl>
        <EditForm method="post" Model="Goal" OnValidSubmit="DeleteGoal" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Goal is null)">Delete</button> |
            <a href="/Goals">Back to List</a>
        </EditForm>
    }
</div>

@code {
    public Goal Goal { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("id", out var idValue) && int.TryParse(idValue, out var id))
        {
            var filter = Builders<Goal>.Filter.Eq(t => t.Id, id);
            Goal = await DB.Goal.Find(filter).FirstOrDefaultAsync();
            if (Goal == null)
            {
                navigationManager.NavigateTo("notfound");
            }
        }
        else
        {
            navigationManager.NavigateTo("/Goals");
        }
    }

    public async Task DeleteGoal()
    {
        if (Goal == null) return;

        var filter = Builders<Goal>.Filter.Eq(t => t.Id, Goal.Id);
        var deleteResult = await DB.Goal.DeleteOneAsync(filter);

        if (deleteResult.DeletedCount == 0)
        {
            navigationManager.NavigateTo("notfound");
        }
        else
        {
            navigationManager.NavigateTo("/Goals", true);
        }
    }
}