@page "/"
@inject IJSRuntime js
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>
<div class="row">
    <div class="col-12">
        <h2 class="fw-bolder">Welcome to <span class="text-muted"> Personal Planner</span></h2>
    </div>
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <AuthorizeView>
                    <NotAuthorized>
                        <span> You are not logged in. Please <a class="fw-bolder" href="/login"> Click here</a> to
                            login or <a class="fw-bolder" href="/Signup"> Sign up</a> If you do not have an
                            account</span>
                    </NotAuthorized>
                    <Authorized>
                        <span> Logged in as <b>@context.User.Identity.Name</b>. <a class="fw-bolder"
                                href="/logout">Click here</a> to
                            logout.</span>
                    </Authorized>
                </AuthorizeView>

                <AuthorizeView>
    <Authorized>
        <br /><br />
        <button class="btn btn-outline-primary" @onclick="DisplayGreetingAlert"> Display Greeting</button>
    </Authorized>
</AuthorizeView>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private int currentCount = 0;

      private async Task DisplayGreetingAlert()
    {
        var authenticationState = await authenticationStateTask;
        var message = $" Hello {authenticationState.User.Claims.FirstOrDefault(c => c.Type == System.Security.Claims.ClaimTypes.Role).Value} {authenticationState.User.Identity.Name}";
        await js.InvokeVoidAsync("alert", message);
    }
}