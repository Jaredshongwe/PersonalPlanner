@page "/budget/Delete"

@using PersonalPlanner.Data
@using PersonalPlanner.Models
@using MongoDB.Driver
@inject MongoDBContext dbContext
@inject NavigationManager navigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <hr />
    @if (Budgets == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@Budgets.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@Budgets.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Currency</dt>
            <dd class="col-sm-10">@Budgets.Currency</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@Budgets.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@Budgets.EndDate</dd>
        </dl>
        <EditForm Model="@Budgets" OnValidSubmit="DeleteBudget" FormName="deleteForm">
            <button type="submit" class="btn btn-danger">Delete</button> |
            <a href="/budget">Back to List</a>
        </EditForm>
    }
</div>

@code {
    public Budget? Budgets { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("id", out var idValue) && int.TryParse(idValue, out var id))
        {
            var filter = Builders<Budget>.Filter.Eq(t => t.Id, id);
            Budgets = await dbContext.Budgets.Find(filter).FirstOrDefaultAsync();
            if (Budgets == null)
            {
                navigationManager.NavigateTo("notfound");
            }
        }
        else
        {
            navigationManager.NavigateTo("/Todos");
        }
    }

    public async Task DeleteBudget()
    {
        if (Budgets == null) return;

        var filter = Builders<Budget>.Filter.Eq(t => t.Id, Budgets.Id);
        var deleteResult = await dbContext.Budgets.DeleteOneAsync(filter);

        if (deleteResult.DeletedCount == 0)
        {
            navigationManager.NavigateTo("notfound");
        }
        else
        {
            navigationManager.NavigateTo("/budget", true);
        }
    }
}
